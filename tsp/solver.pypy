#!/usr/bin/python
# -*- coding: utf-8 -*-
import math
import sys
import random
# from PIL import Image, ImageDraw, ImageFont

# sys.setrecursionlimit(10000)


def length(point1, point2):
    return math.sqrt((point1[0] - point2[0])**2 + (point1[1] - point2[1])**2)


# def distance_matrix(points):
#     matrix = {}
#     for i in range(len(points)):
#         for j in range(i + 1, len(points)):
#                 matrix[i, j] = length(points[i], points[j])

#     return matrix


def P(prev_score, next_score, temperature):
    if next_score < prev_score:
        return 1.0
    else:
        return math.exp(-(next_score - prev_score) / temperature)


def kirkpatrick_cooling(start_temp, alpha):
    T = start_temp
    while True:
        yield T
        T = alpha * T


def read_points(inputData):
    # parse the input
    lines = inputData.split('\n')

    point_count = int(lines[0])

    points = []
    for i in range(1, point_count + 1):
        line = lines[i]
        parts = line.split()
        points.append((float(parts[0]), float(parts[1])))

    return points, point_count

def tour_length(points, solution):
    # calculate the length of the tour
    obj = length(points[solution[-1]], points[solution[0]])
    for index in range(0, len(solution) - 1):
        obj += length(points[solution[index]], points[solution[index+1]])

    # if solution[-1] < solution[0]:
    #     obj = dm[solution[-1], solution[0]]
    # else:
    #     obj = dm[solution[0], solution[-1]]

    # count = len(solution)
    # for index in range(0, count - 1):
    #     if solution[index] < solution[index + 1]:
    #         obj += dm[solution[index], solution[index + 1]]
    #     else:
    #         obj += dm[solution[index + 1], solution[index]]

    return obj


def all_pairs(size, shuffle=random.shuffle):
    r1 = range(size)
    r2 = range(size)
    if shuffle:
        shuffle(r1)
        shuffle(r2)
    for i in r1:
        for j in r2:
            yield (i,j)

# def swapped_cities(tour):
#     '''generator to create all possible variations
#       where two cities have been swapped'''
#     for i, j in all_pairs(len(tour)):
#         if i < j:
#             copy = tour[:]
#             copy[i], copy[j] = tour[j], tour[i]
#             yield copy


def reversed_sections(tour):
    '''generator to return all possible variations
      where the section between two cities are swapped'''
    for i, j in all_pairs(len(tour)):
        if i != j:
            copy = tour[:]
            if i < j:
                copy[i:j + 1] = reversed(tour[i:j + 1])
            else:
                #copy[j:i + 1] = reversed(tour[j:i + 1])
                copy[i + 1:] = reversed(tour[:j])
                copy[:j]=reversed(tour[i + 1:])
            if copy != tour: # no point returning the same tour
                yield copy


# def write_tour_to_img(coords,tour,img_file):
#     padding=200
#     # shift all coords in a bit
#     coords=[(x*30+padding, y*30+padding) for (x,y) in coords]
#     maxx,maxy=0,0
#     for x,y in coords:
#         maxx=max(x,maxx)
#         maxy=max(y,maxy)
#     maxx+=padding
#     maxy+=padding
#     img=Image.new("RGB",(int(maxx),int(maxy)),color=(255,255,255))

#     font=ImageFont.load_default()
#     d=ImageDraw.Draw(img);
#     num_cities=len(tour)
#     for i in range(num_cities):
#         j=(i+1)%num_cities
#         city_i=tour[i]
#         city_j=tour[j]
#         x1,y1=coords[city_i]
#         x2,y2=coords[city_j]
#         d.line((int(x1),int(y1),int(x2),int(y2)),fill=(0,0,0))
#         d.text((int(x1)+7,int(y1)-5),str(i),font=font,fill=(32,32,32))


#     for x,y in coords:
#         x,y=int(x),int(y)
#         d.ellipse((x-5,y-5,x+5,y+5),outline=(0,0,0),fill=(196,196,196))
#     del d
#     img.save(img_file, "PNG")


class ObjectiveFunction:
    '''class to wrap an objective function and
    keep track of the best solution evaluated'''
    def __init__(self,objective_function):
        self.objective_function = objective_function
        self.best_solution = None
        self.best_score = None

    def __call__(self,solution):
        score = self.objective_function(solution)
        if self.best_solution is None or score < self.best_score:
            self.best_score = score
            self.best_solution = solution
        return score


def anneal(init_function,move_operator,objective_function,max_evaluations,start_temp,alpha):

    # wrap the objective function (so we record the best)
    objective_function = ObjectiveFunction(objective_function)

    current = init_function()
    current_score = objective_function(current)
    num_evaluations = 1

    cooling_schedule = kirkpatrick_cooling(start_temp, alpha)

    for temperature in cooling_schedule:
        done = False
        # examine moves around our current position
        for next in move_operator(current):
            if num_evaluations >= max_evaluations:
                done = True
                break

            next_score = objective_function(next)
            num_evaluations += 1

            # probablistically accept this solution
            # always accepting better solutions
            p = P(current_score, next_score, temperature)
            if random.random() < p:
                current = next
                current_score = next_score
                break
        # see if completely finished
        if done: break

    best_score = objective_function.best_score
    best_solution = objective_function.best_solution

    return (num_evaluations, best_score, best_solution)


def init_random_tour(tour_length):
   tour = range(tour_length)
   # random.shuffle(tour)
   # tour = map(int, best.split())
   return tour


def solveIt(inputData):
    # Modify this code to run your optimization algorithm
    points, point_count = read_points(inputData)
    # dm = distance_matrix(points)

    max_iterations = 1000000 #30000000
    move_operator = reversed_sections # or swapped_cities
    start_temp = 50000.0
    alpha = 0.999
    init_function = lambda: init_random_tour(len(points))
    objective_function = lambda tour: tour_length(points, tour)

    iterations, score, solution = anneal(init_function, move_operator, objective_function, max_iterations, start_temp, alpha)

    # write_tour_to_img(points, solution, "test.png")

    # prepare the solution in the specified output format
    outputData = str(score) + ' ' + str(0) + '\n'
    outputData += ' '.join(map(str, solution))

    return outputData


if __name__ == '__main__':
    if len(sys.argv) > 1:
        fileLocation = sys.argv[1].strip()
        inputDataFile = open(fileLocation, 'r')
        inputData = ''.join(inputDataFile.readlines())
        inputDataFile.close()
        print solveIt(inputData)
    else:
        print 'This test requires an input file.  Please select one from the data directory. (i.e. python solver.py ./data/tsp_51_1)'

